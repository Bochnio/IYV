package hello;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private DictionaryRepository dictionaryRepository;
    @Autowired
    private SentenceRepository sentenceRepository;
    @Autowired
    private SynonymRepository synonymRepository;

    @GetMapping(path="/addNewWord") // Map ONLY GET Requests
    public @ResponseBody void addNewWord (@RequestParam String word, @RequestParam String translation, @RequestParam String addDate, @RequestParam String modDate) {

        Dictionary dict = new Dictionary();
        dict.setWord(word);
        dict.setTranslation(translation);
        dict.setAddDate(addDate);
        dict.setModDate(modDate);
        dict.setMaxId(2);

        dictionaryRepository.save(dict);

        Sentence sentAff = new Sentence();
        sentAff.setWordId(dict.getId());
        sentAff.setSentCont("");
        sentAff.setSentId(0);
        sentAff.setSentType("AFF");
        sentAff.setNo(1);
        sentenceRepository.save(sentAff);

        Sentence sentQue = new Sentence();
        sentQue.setWordId(dict.getId());
        sentQue.setSentCont("");
        sentQue.setSentId(1);
        sentQue.setSentType("QUE");
        sentQue.setNo(1);
        sentenceRepository.save(sentQue);

        Sentence sentNeg = new Sentence();
        sentNeg.setWordId(dict.getId());
        sentNeg.setSentCont("");
        sentNeg.setSentId(2);
        sentNeg.setSentType("NEG");
        sentNeg.setNo(1);
        sentenceRepository.save(sentNeg);

        Synonym synonym = new Synonym();
        synonym.setWordId(dict.getId());
        synonym.setSynCont("");
        synonymRepository.save(synonym);

    }

    @GetMapping(path="/updateSentenceContent") // Map ONLY GET Requests
    public @ResponseBody void updateSentenceContent (@RequestParam String word, @RequestParam String sent_cont, @RequestParam Integer sent_id) {

        Dictionary dictionary;
        dictionary = dictionaryRepository.findByWord(word);

        Sentence sentence;
        sentence = sentenceRepository.findByWordIdAndSentId(dictionary.getId(), sent_id);
        sentence.setSentCont(sent_cont);
        sentenceRepository.save(sentence);
    }

    @GetMapping(path="/updateSentenceCorrectness")
    public @ResponseBody void updateSentenceCorrectness (@RequestParam String word, @RequestParam String sentCorr, @RequestParam Integer sentId) {

        Dictionary dictionary;
        dictionary = dictionaryRepository.findByWord(word);

        Sentence sentence;
        sentence = sentenceRepository.findByWordIdAndSentId(dictionary.getId(), sentId);
        sentence.setSentCorr(sentCorr);

        System.out.println("sentCorr zdania ->" + sentence.getSentCorr() + "<- ID zdania: ->" + sentence.getId() + "<-");

        sentenceRepository.save(sentence);
    }

    @GetMapping(path="/deleteWord")
    public @ResponseBody void deleteWord (@RequestParam String word) {

        Dictionary dictionary;
        dictionary = dictionaryRepository.findByWord(word);

        List<Sentence> sentenceList;
        sentenceList = sentenceRepository.findAllByWordId(dictionary.getId());
        sentenceRepository.delete(sentenceList);

        Synonym synonym;
        synonym = synonymRepository.findByWordId(dictionary.getId());
        synonymRepository.delete(synonym);

        dictionaryRepository.delete(dictionary);

    }

    @Controller
    @RequestMapping("/sendAllWords")
    public class HelloWorldController {
        @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
        public @ResponseBody List<Word> sayHello(HttpServletResponse response) {

            response.setHeader("Access-Control-Allow-Origin", "*");
            Iterable <Dictionary> dictionaryList;
            List <Sentence> wordSentences;
            Synonym synonym;
            List<Word> wordList = new ArrayList<>();

            dictionaryList = dictionaryRepository.findAll();

            for (Iterator<Dictionary> i = dictionaryList.iterator(); i.hasNext();){
                Word word = new Word();
                List <Sentences> sentencesList = new ArrayList<>();
                Synon synon = new Synon();
                Dictionary dict;
                dict = i.next();
                word.setEngForm(dict.getWord());
                word.setPlForm(dict.getTranslation());

                //Zliczanie ile słowo ma zdań
                wordSentences = sentenceRepository.findAllByWordId(dict.getId());
                int sentenceCounter = wordSentences.size();

                //Petla w której tworzone są kolejne obiekty typu Sentences
                for(int k = 1; k <= sentenceCounter/3; k++){

                    Asentence asentence = new Asentence();
                    Qsentence qsentence = new Qsentence();
                    Nsentence nsentence = new Nsentence();
                    Sentence sentence;

                    sentence = sentenceRepository.findByWordIdAndSentTypeAndNo(dict.getId(), "AFF" ,k);

                    asentence.setId(sentence.getSentId());
                    asentence.setAcontent(sentence.getSentCont());
                    asentence.setCorr(sentence.getSentCorr());

                    sentence = sentenceRepository.findByWordIdAndSentTypeAndNo(dict.getId(), "QUE" ,k);

                    qsentence.setId(sentence.getSentId());
                    qsentence.setQcontent(sentence.getSentCont());
                    qsentence.setCorr(sentence.getSentCorr());

                    sentence = sentenceRepository.findByWordIdAndSentTypeAndNo(dict.getId(), "NEG" ,k);

                    nsentence.setId(sentence.getSentId());
                    nsentence.setNcontent(sentence.getSentCont());
                    nsentence.setCorr(sentence.getSentCorr());

                    Sentences sentences = new Sentences(k, asentence, qsentence, nsentence);

                    sentencesList.add(sentences);

                    }

                word.setSentences(sentencesList);
                //Ustawianie synonimu
                synonym = synonymRepository.findByWordId(dict.getId());
                synon.setSyncontent(synonym.getSynCont());
                synon.setCorr(synonym.getSynCorr());
                word.setSynonyms(synon);

                //Ustawiania dat
                word.setAddDate(dict.getAddDate());
                word.setModDate(dict.getModDate());

                //Ustawianie maxID
                word.setMaxID(dict.getMaxId());

                //Dodanie słowa do listy
                wordList.add(word);
                }

            return wordList;
            }
        }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Sentence> getAllWords() {
        // This returns a JSON or XML with the users
        return sentenceRepository.findAll();
    }

    //Metoda testowa do wyszukiwania ID
    @GetMapping(path="/selectId") // Map ONLY GET Requests
    public @ResponseBody String selectWord () {

        Dictionary result;
        result = dictionaryRepository.findByWord("pleasant");
        result.setWord("Fajny");
        dictionaryRepository.save(result);
        return result.getTranslation();

    }
}