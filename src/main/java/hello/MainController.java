package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import java.io.Console;

import hello.Dictionary;
import hello.DictionaryRepository;
import hello.Sentence;
import hello.SentenceRepository;



@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private DictionaryRepository dictionaryRepository;
    private SentenceRepository sentenceRepository;


    @GetMapping(path="/addNewWord") // Map ONLY GET Requests
    public @ResponseBody String addNewWord (@RequestParam String word, @RequestParam String translation, @RequestParam String addDate, @RequestParam String modDate) {

        Dictionary dict = new Dictionary();
        dict.setWord(word);
        dict.setTranslation(translation);
        dict.setAddDate(addDate);
        dict.setModDate(modDate);
        dict.setMax_id(2);

        System.out.println("Zawartość obiektu dict:" + dict.getId() + " " + dict.getWord() + " " + dict.getTranslation() + " " + dict.getAddDate() + " " + dict.getModDate() + " " + dict.getMax_id());

        dictionaryRepository.save(dict);

        Sentence sentAff = new Sentence();
        sentAff.setWord_id(dict.getId());
        sentAff.setSent_cont("test");
        sentAff.setSent_id(0);
        sentAff.setSent_type("AFF");
        sentAff.setSent_corr("test");

        System.out.println("Zawartość obiektu sentAdd:" + sentAff.getId() + " " + sentAff.getWord_id() + " " + sentAff.getSent_cont() + " " + sentAff.getSent_id() + " " + " " + sentAff.getSent_type() + " " + sentAff.getSent_corr());

        sentenceRepository.save(sentAff);

        Sentence sentQue = new Sentence();
        sentQue.setWord_id(dict.getId());
        sentQue.setSent_cont("");
        sentQue.setSent_id(1);
        sentQue.setSent_type("QUE");
        sentenceRepository.save(sentQue);

        Sentence sentNeg = new Sentence();
        sentQue.setWord_id(dict.getId());
        sentQue.setSent_cont("");
        sentQue.setSent_id(2);
        sentQue.setSent_type("NEG");
        sentenceRepository.save(sentNeg);

        return "Saved";

        //Kod do listowania
        //For po findAll Dictionaryi i budować po kolei obiekty word

        //Update robi się przez save
        // dictionaryRepository.findOne()

        // Select id... -> findByWord() -> spring data

        // Utworzenie obiektu z kilku tabelek

        // Notatki: Spring data

        //JPA/Hibernate one-to-many relationship

        //Utworzyć sentenceRepository

    }

    @GetMapping(path="/selectId") // Map ONLY GET Requests
    public @ResponseBody String selectId (@RequestParam String word, @RequestParam String translation, @RequestParam String addDate, @RequestParam String modDate , @RequestParam Integer max_id) {

        //Dictionary dictionary = dictionaryRepository.findByWord(word);

        //int id = dict.findByWord(String word);

        //int id = dict.findByWord;

        return "Saved";

    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Sentence> getAllWords() {
        // This returns a JSON or XML with the users
        return sentenceRepository.findAll();
    }
}